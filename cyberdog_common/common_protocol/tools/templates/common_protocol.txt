// Copyright (c) 2022 Beijing Xiaomi Mobile Software Co., Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef __COMMON_PROTOCOL_H__
#define __COMMON_PROTOCOL_H__

#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#define SUPPORT_DOUBLE_U64
#define ORDER_CHECK_TYPE uint8_t

float u32_bits_to_float(uint32_t u32_data)
{
  return *((float *)(&u32_data));
}

uint32_t float_bits_to_u32(float float_data)
{
  return *((uint32_t *)(&float_data));
}

float u32_range_to_float(uint32_t u32_data, float min, float max, uint8_t bits)
{
  return ((float)u32_data)*(max-min)/((float)(((uint32_t)(1)<<bits)-1))+min;
}

uint32_t float_range_to_u32(float float_data, float min, float max, uint8_t bits)
{
  return (uint32_t)((float_data-min)*((float)((1<<bits)-1))/(max - min));
}

#ifdef SUPPORT_DOUBLE_U64
double u64_bits_to_double(uint64_t u64_data)
{
  return *((double *)(&u64_data));
}

uint64_t double_bits_to_u64(double double_data)
{
  return *((uint64_t *)(&double_data));
}

double u64_range_to_double(uint32_t u32_data, double min, double max, uint8_t bits)
{
  return ((double)u32_data)*(max-min)/((double)(((uint32_t)(1)<<bits)-1))+min;
}

uint64_t double_range_to_u64(double double_data, double min, double max, uint8_t bits)
{
  return (uint64_t)((double_data-min)*((double)((1<<bits)-1))/(max - min));
}
#endif  // SUPPORT_DOUBLE_U64

bool is_package_inorder(
  ORDER_CHECK_TYPE * expect,
  ORDER_CHECK_TYPE target,
  bool * error_flag,
  bool is_end)
{
  if (*expect != target) {
    *expect = 0;
    *error_flag = true;
    return false;
  }
  if (is_end) {
    *expect = 0;
    *error_flag = false;
  }
  return true;
}

/// @note Need to define in other .c file AND depend on the chip type you choose
/// @brief STD CAN Send out func
/// @param can_id CAN_ID
/// @param extend CAN_ID format in Standard or Extended
/// @param data Data array and length is 8
void send_std_can(uint32_t can_id, bool extend, uint8_t * data);

/// @note Need to define in other .c file AND depend on the chip type you choose
/// @brief FD CAN Send out func
/// @param can_id CAN_ID
/// @param extend CAN_ID format in Standard or Extended
/// @param data Data array and length is 64
void send_fd_can(uint32_t can_id, bool extend, uint8_t * data);

#endif  // __COMMON_PROTOCOL_H__
